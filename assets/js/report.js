import { db } from './firebase.js';

const reportDateInput = document.getElementById('report-date');
const loadReportBtn = document.getElementById('load-report-btn');
const totalRevenueEl = document.getElementById('total-revenue');
const totalQuantityEl = document.getElementById('total-quantity');
const productSummaryList = document.getElementById('product-summary-list');
const reportBody = document.getElementById('report-body');
const noDataEl = document.getElementById('no-data');

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
export async function loadReport() {
    const date = reportDateInput.value;
    if (!date) {
        alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà');
        return;
    }

    const salesRef = db.ref(`sales/${date}`);
    const snapshot = await salesRef.once('value');
    const salesData = snapshot.val();

    totalRevenueEl.textContent = 0;
    totalQuantityEl.textContent = 0;
    productSummaryList.innerHTML = '<li>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</li>';
    reportBody.innerHTML = '';

    if (!salesData) {
        noDataEl.style.display = 'block';
        return;
    }

    noDataEl.style.display = 'none';
    let allItems = [];
    Object.keys(salesData).forEach(saleKey => {
        const sale = salesData[saleKey];
        if (sale.items && Array.isArray(sale.items)) {
            sale.items.forEach((item, itemIndex) => {
                allItems.push({
                    ...item,
                    timestamp: sale.timestamp,
                    saleKey: saleKey,
                    itemIndex: itemIndex // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏ö/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                });
            });
        }
    });

    allItems.sort((a, b) => a.timestamp - b.timestamp);

    renderReportTable(allItems);
    calculateSummary(allItems);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
function renderReportTable(items) {
    reportBody.innerHTML = items.map(item => {
        const dateTime = new Date(item.timestamp);
        const dateStr = dateTime.toLocaleDateString('th-TH', { day: '2-digit', month: '2-digit', year: 'numeric' });
        const timeStr = dateTime.toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' });

        const paymentIcon = item.paymentMethod === 'transfer'
            ? `<span class="payment-icon" title="‡∏ä‡∏≥‡∏£‡∏∞‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô">üè¶</span>`
            : '';
        
        const displayName = item.customerName
            ? `<strong>${item.customerName}</strong> (${item.mix})`
            : `${item.name} (${item.mix})`;

        return `
            <tr>
                <td>${dateStr}<br><small>${timeStr} ‡∏ô.</small></td>
                <td>${displayName}</td>
                <td>${item.quantity}</td>
                <td>${item.price}</td>
                <td>${item.price * item.quantity}</td>
                <td>
                    <div class="summary-actions">
                        ${paymentIcon}
                        <button class="edit-btn" title="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)">‡πÅ‡∏Å‡πâ</button>
                        <button class="delete-btn" title="‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ" data-date="${reportDateInput.value}" data-sale-key="${item.saleKey}" data-item-index="${item.itemIndex}">‡∏•‡∏ö</button>
                    </div>
                </td>
            </tr>
        `;
    }).join('');
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î
function calculateSummary(items) {
    const totalRevenue = items.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    const totalQuantity = items.reduce((sum, item) => sum + item.quantity, 0);

    totalRevenueEl.textContent = totalRevenue.toLocaleString();
    totalQuantityEl.textContent = totalQuantity;

    const summary = {};
    items.forEach(item => {
        const key = item.customerName ? `${item.customerName} (${item.mix})` : `${item.name} (${item.mix})`;
        if (!summary[key]) {
            summary[key] = 0;
        }
        summary[key] += item.quantity;
    });

    productSummaryList.innerHTML = Object.entries(summary)
        .map(([name, qty]) => `<li>${name}: ${qty} ‡∏´‡∏ô‡πà‡∏ß‡∏¢</li>`)
        .join('');
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢
async function deleteSaleItem(e) {
    if (!e.target.classList.contains('delete-btn')) return;

    const { date, saleKey, itemIndex } = e.target.dataset;
    
    if (!confirm('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) return;

    try {
        const itemRef = db.ref(`sales/${date}/${saleKey}/items/${itemIndex}`);
        await itemRef.remove();
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ô sale record ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const saleRef = db.ref(`sales/${date}/${saleKey}/items`);
        const snapshot = await saleRef.once('value');
        if (!snapshot.exists() || snapshot.val() === null) {
            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏•‡∏ö sale record ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            await db.ref(`sales/${date}/${saleKey}`).remove();
        }

        alert('‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        loadReport(); // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
    } catch (error) {
        console.error('Error deleting item:', error);
        alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö');
    }
}


// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° Event Listener
reportDateInput.value = new Date().toISOString().split('T')[0];
loadReportBtn.addEventListener('click', loadReport);
reportBody.addEventListener('click', deleteSaleItem);

// ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤
export function initReportPage() {
    loadReport();
}